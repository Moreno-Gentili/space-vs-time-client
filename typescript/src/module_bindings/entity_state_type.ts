// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";
// A namespace for generated variants and helper functions.
export namespace EntityState {
  // These are the generated variant types for each variant of the tagged union.
  // One type is generated per variant and will be used in the `value` field of
  // the tagged union.
  export type Spawning = { tag: "Spawning" };
  export type ReadyToMove = { tag: "ReadyToMove" };
  export type Moving = { tag: "Moving" };
  export type ReadyToThrow = { tag: "ReadyToThrow" };
  export type Throwing = { tag: "Throwing" };
  export type Hit = { tag: "Hit" };
  export type LostGame = { tag: "LostGame" };
  export type WonGame = { tag: "WonGame" };
  export type Standby = { tag: "Standby" };
  export type Despawning = { tag: "Despawning" };

  // Helper functions for constructing each variant of the tagged union.
  // ```
  // const foo = Foo.A(42);
  // assert!(foo.tag === "A");
  // assert!(foo.value === 42);
  // ```
  export const Spawning = { tag: "Spawning" };
  export const ReadyToMove = { tag: "ReadyToMove" };
  export const Moving = { tag: "Moving" };
  export const ReadyToThrow = { tag: "ReadyToThrow" };
  export const Throwing = { tag: "Throwing" };
  export const Hit = { tag: "Hit" };
  export const LostGame = { tag: "LostGame" };
  export const WonGame = { tag: "WonGame" };
  export const Standby = { tag: "Standby" };
  export const Despawning = { tag: "Despawning" };

  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createSumType([
      new SumTypeVariant("Spawning", AlgebraicType.createProductType([])),
      new SumTypeVariant("ReadyToMove", AlgebraicType.createProductType([])),
      new SumTypeVariant("Moving", AlgebraicType.createProductType([])),
      new SumTypeVariant("ReadyToThrow", AlgebraicType.createProductType([])),
      new SumTypeVariant("Throwing", AlgebraicType.createProductType([])),
      new SumTypeVariant("Hit", AlgebraicType.createProductType([])),
      new SumTypeVariant("LostGame", AlgebraicType.createProductType([])),
      new SumTypeVariant("WonGame", AlgebraicType.createProductType([])),
      new SumTypeVariant("Standby", AlgebraicType.createProductType([])),
      new SumTypeVariant("Despawning", AlgebraicType.createProductType([])),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: EntityState): void {
      EntityState.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): EntityState {
      return EntityState.getTypeScriptAlgebraicType().deserialize(reader);
  }

}

// The tagged union or sum type for the algebraic type `EntityState`.
export type EntityState = EntityState.Spawning | EntityState.ReadyToMove | EntityState.Moving | EntityState.ReadyToThrow | EntityState.Throwing | EntityState.Hit | EntityState.LostGame | EntityState.WonGame | EntityState.Standby | EntityState.Despawning;

export default EntityState;

