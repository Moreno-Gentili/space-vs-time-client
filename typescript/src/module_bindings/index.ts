// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { ClearAllIdentities } from "./clear_all_identities_reducer.ts";
export { ClearAllIdentities };
import { ClearIdentity } from "./clear_identity_reducer.ts";
export { ClearIdentity };
import { IdentityConnected } from "./identity_connected_reducer.ts";
export { IdentityConnected };
import { IdentityDisconnected } from "./identity_disconnected_reducer.ts";
export { IdentityDisconnected };
import { Impulse } from "./impulse_reducer.ts";
export { Impulse };
import { ImpulseAllBalls } from "./impulse_all_balls_reducer.ts";
export { ImpulseAllBalls };
import { Join } from "./join_reducer.ts";
export { Join };
import { Kick } from "./kick_reducer.ts";
export { Kick };
import { MoveTo } from "./move_to_reducer.ts";
export { MoveTo };
import { Ping } from "./ping_reducer.ts";
export { Ping };
import { RemoveAllBalls } from "./remove_all_balls_reducer.ts";
export { RemoveAllBalls };
import { Say } from "./say_reducer.ts";
export { Say };
import { SetGameAutoStart } from "./set_game_auto_start_reducer.ts";
export { SetGameAutoStart };
import { SpawnAllBalls } from "./spawn_all_balls_reducer.ts";
export { SpawnAllBalls };
import { SpawnSpaceBalls } from "./spawn_space_balls_reducer.ts";
export { SpawnSpaceBalls };
import { SpawnTimeBalls } from "./spawn_time_balls_reducer.ts";
export { SpawnTimeBalls };
import { StartGame } from "./start_game_reducer.ts";
export { StartGame };
import { StartInfiniteGame } from "./start_infinite_game_reducer.ts";
export { StartInfiniteGame };
import { Test } from "./test_reducer.ts";
export { Test };
import { ThrowTo } from "./throw_to_reducer.ts";
export { ThrowTo };
import { Update } from "./update_reducer.ts";
export { Update };

// Import and reexport all table handle types
import { AdminsTableHandle } from "./admins_table.ts";
export { AdminsTableHandle };
import { ClocksTableHandle } from "./clocks_table.ts";
export { ClocksTableHandle };
import { GamesTableHandle } from "./games_table.ts";
export { GamesTableHandle };
import { IdentifiablesTableHandle } from "./identifiables_table.ts";
export { IdentifiablesTableHandle };
import { MessagesTableHandle } from "./messages_table.ts";
export { MessagesTableHandle };
import { MovablesTableHandle } from "./movables_table.ts";
export { MovablesTableHandle };
import { PingablesTableHandle } from "./pingables_table.ts";
export { PingablesTableHandle };
import { RoutablesTableHandle } from "./routables_table.ts";
export { RoutablesTableHandle };
import { SchedulesTableHandle } from "./schedules_table.ts";
export { SchedulesTableHandle };
import { StatsTableHandle } from "./stats_table.ts";
export { StatsTableHandle };

// Import and reexport all types
import { Admin } from "./admin_type.ts";
export { Admin };
import { Clock } from "./clock_type.ts";
export { Clock };
import { EntityKind } from "./entity_kind_type.ts";
export { EntityKind };
import { EntityState } from "./entity_state_type.ts";
export { EntityState };
import { Game } from "./game_type.ts";
export { Game };
import { GameState } from "./game_state_type.ts";
export { GameState };
import { Identifiable } from "./identifiable_type.ts";
export { Identifiable };
import { Message } from "./message_type.ts";
export { Message };
import { Movable } from "./movable_type.ts";
export { Movable };
import { Pingable } from "./pingable_type.ts";
export { Pingable };
import { Routable } from "./routable_type.ts";
export { Routable };
import { RouteAction } from "./route_action_type.ts";
export { RouteAction };
import { Schedule } from "./schedule_type.ts";
export { Schedule };
import { Stat } from "./stat_type.ts";
export { Stat };
import { Vector3D } from "./vector_3_d_type.ts";
export { Vector3D };

const REMOTE_MODULE = {
  tables: {
    admins: {
      tableName: "admins",
      rowType: Admin.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
    },
    clocks: {
      tableName: "clocks",
      rowType: Clock.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    games: {
      tableName: "games",
      rowType: Game.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    identifiables: {
      tableName: "identifiables",
      rowType: Identifiable.getTypeScriptAlgebraicType(),
      primaryKey: "name",
    },
    messages: {
      tableName: "messages",
      rowType: Message.getTypeScriptAlgebraicType(),
      primaryKey: "name",
    },
    movables: {
      tableName: "movables",
      rowType: Movable.getTypeScriptAlgebraicType(),
      primaryKey: "name",
    },
    pingables: {
      tableName: "pingables",
      rowType: Pingable.getTypeScriptAlgebraicType(),
      primaryKey: "name",
    },
    routables: {
      tableName: "routables",
      rowType: Routable.getTypeScriptAlgebraicType(),
      primaryKey: "name",
    },
    schedules: {
      tableName: "schedules",
      rowType: Schedule.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
    },
    stats: {
      tableName: "stats",
      rowType: Stat.getTypeScriptAlgebraicType(),
      primaryKey: "name",
    },
  },
  reducers: {
    clear_all_identities: {
      reducerName: "clear_all_identities",
      argsType: ClearAllIdentities.getTypeScriptAlgebraicType(),
    },
    clear_identity: {
      reducerName: "clear_identity",
      argsType: ClearIdentity.getTypeScriptAlgebraicType(),
    },
    identity_connected: {
      reducerName: "identity_connected",
      argsType: IdentityConnected.getTypeScriptAlgebraicType(),
    },
    identity_disconnected: {
      reducerName: "identity_disconnected",
      argsType: IdentityDisconnected.getTypeScriptAlgebraicType(),
    },
    impulse: {
      reducerName: "impulse",
      argsType: Impulse.getTypeScriptAlgebraicType(),
    },
    impulse_all_balls: {
      reducerName: "impulse_all_balls",
      argsType: ImpulseAllBalls.getTypeScriptAlgebraicType(),
    },
    join: {
      reducerName: "join",
      argsType: Join.getTypeScriptAlgebraicType(),
    },
    kick: {
      reducerName: "kick",
      argsType: Kick.getTypeScriptAlgebraicType(),
    },
    move_to: {
      reducerName: "move_to",
      argsType: MoveTo.getTypeScriptAlgebraicType(),
    },
    ping: {
      reducerName: "ping",
      argsType: Ping.getTypeScriptAlgebraicType(),
    },
    remove_all_balls: {
      reducerName: "remove_all_balls",
      argsType: RemoveAllBalls.getTypeScriptAlgebraicType(),
    },
    say: {
      reducerName: "say",
      argsType: Say.getTypeScriptAlgebraicType(),
    },
    set_game_auto_start: {
      reducerName: "set_game_auto_start",
      argsType: SetGameAutoStart.getTypeScriptAlgebraicType(),
    },
    spawn_all_balls: {
      reducerName: "spawn_all_balls",
      argsType: SpawnAllBalls.getTypeScriptAlgebraicType(),
    },
    spawn_space_balls: {
      reducerName: "spawn_space_balls",
      argsType: SpawnSpaceBalls.getTypeScriptAlgebraicType(),
    },
    spawn_time_balls: {
      reducerName: "spawn_time_balls",
      argsType: SpawnTimeBalls.getTypeScriptAlgebraicType(),
    },
    start_game: {
      reducerName: "start_game",
      argsType: StartGame.getTypeScriptAlgebraicType(),
    },
    start_infinite_game: {
      reducerName: "start_infinite_game",
      argsType: StartInfiniteGame.getTypeScriptAlgebraicType(),
    },
    test: {
      reducerName: "test",
      argsType: Test.getTypeScriptAlgebraicType(),
    },
    throw_to: {
      reducerName: "throw_to",
      argsType: ThrowTo.getTypeScriptAlgebraicType(),
    },
    update: {
      reducerName: "update",
      argsType: Update.getTypeScriptAlgebraicType(),
    },
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "ClearAllIdentities", args: ClearAllIdentities }
| { name: "ClearIdentity", args: ClearIdentity }
| { name: "IdentityConnected", args: IdentityConnected }
| { name: "IdentityDisconnected", args: IdentityDisconnected }
| { name: "Impulse", args: Impulse }
| { name: "ImpulseAllBalls", args: ImpulseAllBalls }
| { name: "Join", args: Join }
| { name: "Kick", args: Kick }
| { name: "MoveTo", args: MoveTo }
| { name: "Ping", args: Ping }
| { name: "RemoveAllBalls", args: RemoveAllBalls }
| { name: "Say", args: Say }
| { name: "SetGameAutoStart", args: SetGameAutoStart }
| { name: "SpawnAllBalls", args: SpawnAllBalls }
| { name: "SpawnSpaceBalls", args: SpawnSpaceBalls }
| { name: "SpawnTimeBalls", args: SpawnTimeBalls }
| { name: "StartGame", args: StartGame }
| { name: "StartInfiniteGame", args: StartInfiniteGame }
| { name: "Test", args: Test }
| { name: "ThrowTo", args: ThrowTo }
| { name: "Update", args: Update }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  clearAllIdentities() {
    this.connection.callReducer("clear_all_identities", new Uint8Array(0), this.setCallReducerFlags.clearAllIdentitiesFlags);
  }

  onClearAllIdentities(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("clear_all_identities", callback);
  }

  removeOnClearAllIdentities(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("clear_all_identities", callback);
  }

  clearIdentity(name: string) {
    const __args = { name };
    let __writer = new BinaryWriter(1024);
    ClearIdentity.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("clear_identity", __argsBuffer, this.setCallReducerFlags.clearIdentityFlags);
  }

  onClearIdentity(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.onReducer("clear_identity", callback);
  }

  removeOnClearIdentity(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.offReducer("clear_identity", callback);
  }

  onIdentityConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_connected", callback);
  }

  removeOnIdentityConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_connected", callback);
  }

  onIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_disconnected", callback);
  }

  removeOnIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_disconnected", callback);
  }

  impulse(name: string, x: number, y: number) {
    const __args = { name, x, y };
    let __writer = new BinaryWriter(1024);
    Impulse.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("impulse", __argsBuffer, this.setCallReducerFlags.impulseFlags);
  }

  onImpulse(callback: (ctx: ReducerEventContext, name: string, x: number, y: number) => void) {
    this.connection.onReducer("impulse", callback);
  }

  removeOnImpulse(callback: (ctx: ReducerEventContext, name: string, x: number, y: number) => void) {
    this.connection.offReducer("impulse", callback);
  }

  impulseAllBalls() {
    this.connection.callReducer("impulse_all_balls", new Uint8Array(0), this.setCallReducerFlags.impulseAllBallsFlags);
  }

  onImpulseAllBalls(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("impulse_all_balls", callback);
  }

  removeOnImpulseAllBalls(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("impulse_all_balls", callback);
  }

  join(name: string) {
    const __args = { name };
    let __writer = new BinaryWriter(1024);
    Join.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("join", __argsBuffer, this.setCallReducerFlags.joinFlags);
  }

  onJoin(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.onReducer("join", callback);
  }

  removeOnJoin(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.offReducer("join", callback);
  }

  kick(name: string) {
    const __args = { name };
    let __writer = new BinaryWriter(1024);
    Kick.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("kick", __argsBuffer, this.setCallReducerFlags.kickFlags);
  }

  onKick(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.onReducer("kick", callback);
  }

  removeOnKick(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.offReducer("kick", callback);
  }

  moveTo(x: number, y: number) {
    const __args = { x, y };
    let __writer = new BinaryWriter(1024);
    MoveTo.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("move_to", __argsBuffer, this.setCallReducerFlags.moveToFlags);
  }

  onMoveTo(callback: (ctx: ReducerEventContext, x: number, y: number) => void) {
    this.connection.onReducer("move_to", callback);
  }

  removeOnMoveTo(callback: (ctx: ReducerEventContext, x: number, y: number) => void) {
    this.connection.offReducer("move_to", callback);
  }

  ping(timestamp: bigint) {
    const __args = { timestamp };
    let __writer = new BinaryWriter(1024);
    Ping.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("ping", __argsBuffer, this.setCallReducerFlags.pingFlags);
  }

  onPing(callback: (ctx: ReducerEventContext, timestamp: bigint) => void) {
    this.connection.onReducer("ping", callback);
  }

  removeOnPing(callback: (ctx: ReducerEventContext, timestamp: bigint) => void) {
    this.connection.offReducer("ping", callback);
  }

  removeAllBalls() {
    this.connection.callReducer("remove_all_balls", new Uint8Array(0), this.setCallReducerFlags.removeAllBallsFlags);
  }

  onRemoveAllBalls(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("remove_all_balls", callback);
  }

  removeOnRemoveAllBalls(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("remove_all_balls", callback);
  }

  say(text: string) {
    const __args = { text };
    let __writer = new BinaryWriter(1024);
    Say.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("say", __argsBuffer, this.setCallReducerFlags.sayFlags);
  }

  onSay(callback: (ctx: ReducerEventContext, text: string) => void) {
    this.connection.onReducer("say", callback);
  }

  removeOnSay(callback: (ctx: ReducerEventContext, text: string) => void) {
    this.connection.offReducer("say", callback);
  }

  setGameAutoStart(enable: boolean) {
    const __args = { enable };
    let __writer = new BinaryWriter(1024);
    SetGameAutoStart.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("set_game_auto_start", __argsBuffer, this.setCallReducerFlags.setGameAutoStartFlags);
  }

  onSetGameAutoStart(callback: (ctx: ReducerEventContext, enable: boolean) => void) {
    this.connection.onReducer("set_game_auto_start", callback);
  }

  removeOnSetGameAutoStart(callback: (ctx: ReducerEventContext, enable: boolean) => void) {
    this.connection.offReducer("set_game_auto_start", callback);
  }

  spawnAllBalls(count: number) {
    const __args = { count };
    let __writer = new BinaryWriter(1024);
    SpawnAllBalls.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("spawn_all_balls", __argsBuffer, this.setCallReducerFlags.spawnAllBallsFlags);
  }

  onSpawnAllBalls(callback: (ctx: ReducerEventContext, count: number) => void) {
    this.connection.onReducer("spawn_all_balls", callback);
  }

  removeOnSpawnAllBalls(callback: (ctx: ReducerEventContext, count: number) => void) {
    this.connection.offReducer("spawn_all_balls", callback);
  }

  spawnSpaceBalls(count: number) {
    const __args = { count };
    let __writer = new BinaryWriter(1024);
    SpawnSpaceBalls.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("spawn_space_balls", __argsBuffer, this.setCallReducerFlags.spawnSpaceBallsFlags);
  }

  onSpawnSpaceBalls(callback: (ctx: ReducerEventContext, count: number) => void) {
    this.connection.onReducer("spawn_space_balls", callback);
  }

  removeOnSpawnSpaceBalls(callback: (ctx: ReducerEventContext, count: number) => void) {
    this.connection.offReducer("spawn_space_balls", callback);
  }

  spawnTimeBalls(count: number) {
    const __args = { count };
    let __writer = new BinaryWriter(1024);
    SpawnTimeBalls.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("spawn_time_balls", __argsBuffer, this.setCallReducerFlags.spawnTimeBallsFlags);
  }

  onSpawnTimeBalls(callback: (ctx: ReducerEventContext, count: number) => void) {
    this.connection.onReducer("spawn_time_balls", callback);
  }

  removeOnSpawnTimeBalls(callback: (ctx: ReducerEventContext, count: number) => void) {
    this.connection.offReducer("spawn_time_balls", callback);
  }

  startGame(duration: number) {
    const __args = { duration };
    let __writer = new BinaryWriter(1024);
    StartGame.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("start_game", __argsBuffer, this.setCallReducerFlags.startGameFlags);
  }

  onStartGame(callback: (ctx: ReducerEventContext, duration: number) => void) {
    this.connection.onReducer("start_game", callback);
  }

  removeOnStartGame(callback: (ctx: ReducerEventContext, duration: number) => void) {
    this.connection.offReducer("start_game", callback);
  }

  startInfiniteGame() {
    this.connection.callReducer("start_infinite_game", new Uint8Array(0), this.setCallReducerFlags.startInfiniteGameFlags);
  }

  onStartInfiniteGame(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("start_infinite_game", callback);
  }

  removeOnStartInfiniteGame(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("start_infinite_game", callback);
  }

  test(name: string) {
    const __args = { name };
    let __writer = new BinaryWriter(1024);
    Test.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("test", __argsBuffer, this.setCallReducerFlags.testFlags);
  }

  onTest(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.onReducer("test", callback);
  }

  removeOnTest(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.offReducer("test", callback);
  }

  throwTo(x: number, y: number) {
    const __args = { x, y };
    let __writer = new BinaryWriter(1024);
    ThrowTo.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("throw_to", __argsBuffer, this.setCallReducerFlags.throwToFlags);
  }

  onThrowTo(callback: (ctx: ReducerEventContext, x: number, y: number) => void) {
    this.connection.onReducer("throw_to", callback);
  }

  removeOnThrowTo(callback: (ctx: ReducerEventContext, x: number, y: number) => void) {
    this.connection.offReducer("throw_to", callback);
  }

  update(arg: Schedule) {
    const __args = { arg };
    let __writer = new BinaryWriter(1024);
    Update.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("update", __argsBuffer, this.setCallReducerFlags.updateFlags);
  }

  onUpdate(callback: (ctx: ReducerEventContext, arg: Schedule) => void) {
    this.connection.onReducer("update", callback);
  }

  removeOnUpdate(callback: (ctx: ReducerEventContext, arg: Schedule) => void) {
    this.connection.offReducer("update", callback);
  }

}

export class SetReducerFlags {
  clearAllIdentitiesFlags: CallReducerFlags = 'FullUpdate';
  clearAllIdentities(flags: CallReducerFlags) {
    this.clearAllIdentitiesFlags = flags;
  }

  clearIdentityFlags: CallReducerFlags = 'FullUpdate';
  clearIdentity(flags: CallReducerFlags) {
    this.clearIdentityFlags = flags;
  }

  impulseFlags: CallReducerFlags = 'FullUpdate';
  impulse(flags: CallReducerFlags) {
    this.impulseFlags = flags;
  }

  impulseAllBallsFlags: CallReducerFlags = 'FullUpdate';
  impulseAllBalls(flags: CallReducerFlags) {
    this.impulseAllBallsFlags = flags;
  }

  joinFlags: CallReducerFlags = 'FullUpdate';
  join(flags: CallReducerFlags) {
    this.joinFlags = flags;
  }

  kickFlags: CallReducerFlags = 'FullUpdate';
  kick(flags: CallReducerFlags) {
    this.kickFlags = flags;
  }

  moveToFlags: CallReducerFlags = 'FullUpdate';
  moveTo(flags: CallReducerFlags) {
    this.moveToFlags = flags;
  }

  pingFlags: CallReducerFlags = 'FullUpdate';
  ping(flags: CallReducerFlags) {
    this.pingFlags = flags;
  }

  removeAllBallsFlags: CallReducerFlags = 'FullUpdate';
  removeAllBalls(flags: CallReducerFlags) {
    this.removeAllBallsFlags = flags;
  }

  sayFlags: CallReducerFlags = 'FullUpdate';
  say(flags: CallReducerFlags) {
    this.sayFlags = flags;
  }

  setGameAutoStartFlags: CallReducerFlags = 'FullUpdate';
  setGameAutoStart(flags: CallReducerFlags) {
    this.setGameAutoStartFlags = flags;
  }

  spawnAllBallsFlags: CallReducerFlags = 'FullUpdate';
  spawnAllBalls(flags: CallReducerFlags) {
    this.spawnAllBallsFlags = flags;
  }

  spawnSpaceBallsFlags: CallReducerFlags = 'FullUpdate';
  spawnSpaceBalls(flags: CallReducerFlags) {
    this.spawnSpaceBallsFlags = flags;
  }

  spawnTimeBallsFlags: CallReducerFlags = 'FullUpdate';
  spawnTimeBalls(flags: CallReducerFlags) {
    this.spawnTimeBallsFlags = flags;
  }

  startGameFlags: CallReducerFlags = 'FullUpdate';
  startGame(flags: CallReducerFlags) {
    this.startGameFlags = flags;
  }

  startInfiniteGameFlags: CallReducerFlags = 'FullUpdate';
  startInfiniteGame(flags: CallReducerFlags) {
    this.startInfiniteGameFlags = flags;
  }

  testFlags: CallReducerFlags = 'FullUpdate';
  test(flags: CallReducerFlags) {
    this.testFlags = flags;
  }

  throwToFlags: CallReducerFlags = 'FullUpdate';
  throwTo(flags: CallReducerFlags) {
    this.throwToFlags = flags;
  }

  updateFlags: CallReducerFlags = 'FullUpdate';
  update(flags: CallReducerFlags) {
    this.updateFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get admins(): AdminsTableHandle {
    return new AdminsTableHandle(this.connection.clientCache.getOrCreateTable<Admin>(REMOTE_MODULE.tables.admins));
  }

  get clocks(): ClocksTableHandle {
    return new ClocksTableHandle(this.connection.clientCache.getOrCreateTable<Clock>(REMOTE_MODULE.tables.clocks));
  }

  get games(): GamesTableHandle {
    return new GamesTableHandle(this.connection.clientCache.getOrCreateTable<Game>(REMOTE_MODULE.tables.games));
  }

  get identifiables(): IdentifiablesTableHandle {
    return new IdentifiablesTableHandle(this.connection.clientCache.getOrCreateTable<Identifiable>(REMOTE_MODULE.tables.identifiables));
  }

  get messages(): MessagesTableHandle {
    return new MessagesTableHandle(this.connection.clientCache.getOrCreateTable<Message>(REMOTE_MODULE.tables.messages));
  }

  get movables(): MovablesTableHandle {
    return new MovablesTableHandle(this.connection.clientCache.getOrCreateTable<Movable>(REMOTE_MODULE.tables.movables));
  }

  get pingables(): PingablesTableHandle {
    return new PingablesTableHandle(this.connection.clientCache.getOrCreateTable<Pingable>(REMOTE_MODULE.tables.pingables));
  }

  get routables(): RoutablesTableHandle {
    return new RoutablesTableHandle(this.connection.clientCache.getOrCreateTable<Routable>(REMOTE_MODULE.tables.routables));
  }

  get schedules(): SchedulesTableHandle {
    return new SchedulesTableHandle(this.connection.clientCache.getOrCreateTable<Schedule>(REMOTE_MODULE.tables.schedules));
  }

  get stats(): StatsTableHandle {
    return new StatsTableHandle(this.connection.clientCache.getOrCreateTable<Stat>(REMOTE_MODULE.tables.stats));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
