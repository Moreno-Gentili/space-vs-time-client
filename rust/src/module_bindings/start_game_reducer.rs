// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#![allow(unused, clippy::all)]
use spacetimedb_sdk::__codegen::{self as __sdk, __lib, __sats, __ws};

#[derive(__lib::ser::Serialize, __lib::de::Deserialize, Clone, PartialEq, Debug)]
#[sats(crate = __lib)]
pub(super) struct StartGameArgs {
    pub duration: u8,
}

impl From<StartGameArgs> for super::Reducer {
    fn from(args: StartGameArgs) -> Self {
        Self::StartGame {
            duration: args.duration,
        }
    }
}

impl __sdk::InModule for StartGameArgs {
    type Module = super::RemoteModule;
}

pub struct StartGameCallbackId(__sdk::CallbackId);

#[allow(non_camel_case_types)]
/// Extension trait for access to the reducer `start_game`.
///
/// Implemented for [`super::RemoteReducers`].
pub trait start_game {
    /// Request that the remote module invoke the reducer `start_game` to run as soon as possible.
    ///
    /// This method returns immediately, and errors only if we are unable to send the request.
    /// The reducer will run asynchronously in the future,
    ///  and its status can be observed by listening for [`Self::on_start_game`] callbacks.
    fn start_game(&self, duration: u8) -> __sdk::Result<()>;
    /// Register a callback to run whenever we are notified of an invocation of the reducer `start_game`.
    ///
    /// Callbacks should inspect the [`__sdk::ReducerEvent`] contained in the [`super::ReducerEventContext`]
    /// to determine the reducer's status.
    ///
    /// The returned [`StartGameCallbackId`] can be passed to [`Self::remove_on_start_game`]
    /// to cancel the callback.
    fn on_start_game(
        &self,
        callback: impl FnMut(&super::ReducerEventContext, &u8) + Send + 'static,
    ) -> StartGameCallbackId;
    /// Cancel a callback previously registered by [`Self::on_start_game`],
    /// causing it not to run in the future.
    fn remove_on_start_game(&self, callback: StartGameCallbackId);
}

impl start_game for super::RemoteReducers {
    fn start_game(&self, duration: u8) -> __sdk::Result<()> {
        self.imp
            .call_reducer("start_game", StartGameArgs { duration })
    }
    fn on_start_game(
        &self,
        mut callback: impl FnMut(&super::ReducerEventContext, &u8) + Send + 'static,
    ) -> StartGameCallbackId {
        StartGameCallbackId(self.imp.on_reducer(
            "start_game",
            Box::new(move |ctx: &super::ReducerEventContext| {
                let super::ReducerEventContext {
                    event:
                        __sdk::ReducerEvent {
                            reducer: super::Reducer::StartGame { duration },
                            ..
                        },
                    ..
                } = ctx
                else {
                    unreachable!()
                };
                callback(ctx, duration)
            }),
        ))
    }
    fn remove_on_start_game(&self, callback: StartGameCallbackId) {
        self.imp.remove_on_reducer("start_game", callback.0)
    }
}

#[allow(non_camel_case_types)]
#[doc(hidden)]
/// Extension trait for setting the call-flags for the reducer `start_game`.
///
/// Implemented for [`super::SetReducerFlags`].
///
/// This type is currently unstable and may be removed without a major version bump.
pub trait set_flags_for_start_game {
    /// Set the call-reducer flags for the reducer `start_game` to `flags`.
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    fn start_game(&self, flags: __ws::CallReducerFlags);
}

impl set_flags_for_start_game for super::SetReducerFlags {
    fn start_game(&self, flags: __ws::CallReducerFlags) {
        self.imp.set_call_reducer_flags("start_game", flags);
    }
}
